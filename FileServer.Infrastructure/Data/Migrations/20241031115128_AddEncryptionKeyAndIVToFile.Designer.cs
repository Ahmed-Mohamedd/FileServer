// <auto-generated />
using System;
using FileServer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileServer.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FileContext))]
    [Migration("20241031115128_AddEncryptionKeyAndIVToFile")]
    partial class AddEncryptionKeyAndIVToFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("FileServer.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FileServer.Core.Entities.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("EncryptionKey")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("IV")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FileId");

                    b.HasIndex("FileName")
                        .HasDatabaseName("IX_File_FileName");

                    b.HasIndex("UploadedBy")
                        .HasDatabaseName("IX_File_UploadedBy");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileServer.Core.Entities.FileVersion", b =>
                {
                    b.Property<Guid>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("VersionId");

                    b.HasIndex("FileId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("FileVersions");
                });

            modelBuilder.Entity("FileServer.Core.Entities.StorageQuota", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<long>("MaxStorage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10737418240L);

                    b.Property<long?>("UsedStorage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.HasKey("UserId");

                    b.ToTable("StorageQuotas");
                });

            modelBuilder.Entity("FileServer.Core.Entities.File", b =>
                {
                    b.HasOne("FileServer.Core.Entities.AppUser", "User")
                        .WithMany("Files")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileServer.Core.Entities.FileVersion", b =>
                {
                    b.HasOne("FileServer.Core.Entities.File", "File")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileServer.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileServer.Core.Entities.StorageQuota", b =>
                {
                    b.HasOne("FileServer.Core.Entities.AppUser", "User")
                        .WithOne("StorageQuota")
                        .HasForeignKey("FileServer.Core.Entities.StorageQuota", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileServer.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("StorageQuota")
                        .IsRequired();
                });

            modelBuilder.Entity("FileServer.Core.Entities.File", b =>
                {
                    b.Navigation("FileVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
